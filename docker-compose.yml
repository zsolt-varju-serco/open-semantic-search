version: '3'
services:

  apps:
    image: opensemanticsearch/open-semantic-search
    build:
      context: .
    depends_on:
      - rabbitmq
      - solr
      - tika
    volumes:
      - config_etl:/etc/opensemanticsearch
      - config_solr-php-ui:/etc/solr-php-ui
      # Django sqlite DB for settings and thesaurus
      - data_db:/var/opensemanticsearch/db
      # Ontologies uploaded to Django web app and thumbnails generated by ETL
      - data_media:/var/opensemanticsearch/media
    environment:
      - SOLR_PHP_UI_SOLR_HOST=solr
      - OPEN_SEMANTIC_ETL_MQ_BROKER=amqp://rabbitmq
      - OPEN_SEMANTIC_ETL_SOLR=http://solr:8983/solr/
      - OPEN_SEMANTIC_ETL_TIKA_SERVER=http://tika:9998
      - OPEN_SEMANTIC_ETL_TIKA_SERVER_FAKECACHE=http://tika-fakecache:9998
      - OPEN_SEMANTIC_ETL_SPACY_SERVER=http://spacy-services:8080
      - OPEN_SEMANTIC_ETL_NEO4J_HOST=neo4j
      - FLOWER_URL=http://flower:5555/flower
    env_file:
      - neo4j.env
    ports:
      - "8080:80"

  etl:
    image: opensemanticsearch/open-semantic-etl
    build:
      context: src/open-semantic-etl/
    depends_on:
      - apps
      - rabbitmq
      - solr
      - tika
      - tika-fakecache
      - spacy-services
    environment:
      - OPEN_SEMANTIC_ETL_MQ_BROKER=amqp://rabbitmq
      - OPEN_SEMANTIC_ETL_METADATA_SERVER=http://apps/search-apps/annotate/json
      - OPEN_SEMANTIC_ETL_SOLR=http://solr:8983/solr/
      - OPEN_SEMANTIC_ETL_TIKA_SERVER=http://tika:9998
      - OPEN_SEMANTIC_ETL_TIKA_SERVER_FAKECACHE=http://tika-fakecache:9998
      - OPEN_SEMANTIC_ETL_SPACY_SERVER=http://spacy-services:8080
      - OPEN_SEMANTIC_ETL_NEO4J_HOST=neo4j
      - OMP_THREAD_LIMIT=1
    env_file:
      - neo4j.env
    volumes:
      # read only (:ro), since workers don't need to change the config (is done only by admin or web ui in container apps)
      - config_etl:/etc/opensemanticsearch:ro
      # write access to persistent thumbnails dir
      - data_media:/var/opensemanticsearch/media
      - cache_tesseract:/var/cache/tesseract

  solr:
    image: solr-new  # Use the locally built image
    build:
      context: /home/administrator/solr-7.2.2-image  # Use the correct build directory
      dockerfile: Dockerfile  # Ensure it picks the correct Dockerfile
    environment:
      - SOLR_LOCAL_HOST=0.0.0.0
    volumes:
      - data_solr:/opt/solr/server/solr  # Use the correct volume for core persistence
    ports:
      - "8983:8983"  # Enable access to Solr Admin UI

  tika:
    image: opensemanticsearch/tika-server
    build:
      context: src/tika-server.deb/
    environment:
      - OMP_THREAD_LIMIT=1
      - TIKA_CONFIG=/etc/tika/tika-config-cache.xml
    volumes:
      - cache_tesseract:/var/cache/tesseract

  tika-fakecache:
    image: opensemanticsearch/tika-server
    build:
      context: src/tika-server.deb/
    environment:
      - OMP_THREAD_LIMIT=1
      - TIKA_CONFIG=/etc/tika/tika-config-fakecache.xml
    volumes:
      - cache_tesseract:/var/cache/tesseract

  spacy-services:
    image: opensemanticsearch/spacy-services
    build:
      context: src/spacy-services.deb/src/spacy-services/

  rabbitmq:
    image: rabbitmq

  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=amqp://rabbitmq
      - FLOWER_PORT=5555
      - FLOWER_URL_PREFIX=flower
    depends_on:
      - rabbitmq

  neo4j:
    image: neo4j
    restart: always
    env_file:
      - neo4j.env
    volumes:
      - data_neo4j:/data

  # Cron service to enable crawlers to start
  cron:
    image: opensemanticsearch/cron
    build:
      context: .
      dockerfile: Dockerfile-cron

volumes:
  config_etl:
  config_solr-php-ui:
  data_db:
  data_media:
  data_neo4j:
  data_solr:
  cache_tesseract:
